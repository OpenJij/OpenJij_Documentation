name: Build Documentation

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  Python_Version: '3.10'

jobs:
  build_docs:
    name: Build Documentation 
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: ${{env.Python_Version}}
      - name: Python Cache Key
        shell: bash
        run: |
          echo $(which python) > /tmp/python_version.txt
      - name: Get pip cache dir
        shell: bash
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Pip-Tools 
        shell: bash
        run: |
          python -m pip install pip-tools 
          pip-compile
          pip-compile dev-requirements.in
      - name: pip cache
        uses: actions/cache@v3
        with:
           path: ${{ steps.pip-cache.outputs.dir }}
           key: ${{ runner.os }}-pip-${{ hashFiles('/tmp/python_version.txt') }}
           restore-keys: |
              ${{ runner.os }}-pip-
      - name: Update
        run: | 
         pip install --upgrade pip wheel setuptools build cmake ninja 
      - name: Install Dependencies
        shell: bash
        run: |
          set -eux
          pip-sync requirements.txt dev-requirements.txt
      - name: Install Dep
        run: | 
         pip install typing-extensions
         sudo apt-get install -y libeigen3-dev lcov graphviz mscgen dia pdf2svg astyle
         sudo apt-get install -y doxygen doxygen-doxyparse fonts-liberation python3-breathe
      - name: Prepare 
        shell: bash
        run: mkdir build
      - name: CMake Configure
        shell: bash
        run: >
          cmake 
          -DBUILD_DOCS=ON
          -G Ninja
          -S .
          -B build
      - name: CMake Build
        shell: bash
        run: >
          cmake  
          --build build
          --parallel
          --verbose
          --target cxxjij_header_only_docs
      - name: Copy Doc
        shell: bash
        run: |
          set -eux
          cp -r ./build/html/* ./public/
      - name: du -a 
        shell: bash
        if: always()
        run: |
          du -a
      - name: Prepare tag
        id: prepare_tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG_NAME="${GITHUB_REF##refs/tags/}"
          echo "::set-output name=tag_name::${TAG_NAME}"
          echo "::set-output name=deploy_tag_name::deploy-${TAG_NAME}"
      - name: Deploy
        #if: ${{github.event_name == 'release'}}
        uses: peaceiris/actions-gh-pages@v3
        with:
         github_token: ${{ secrets.GITHUB_TOKEN }}
         publish_dir: public
         destination_dir: docs
         allow_empty_commit: true
         user_name: 'github-actions[bot]'
         user_email: 'github-actions[bot]@users.noreply.github.com'
         tag_name: ${{ steps.prepare_tag.outputs.deploy_tag_name }}
         tag_message: 'Deployment ${{ steps.prepare_tag.outputs.tag_name }}'
